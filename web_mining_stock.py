# -*- coding: utf-8 -*-
"""web_mining_stock.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iN18DQGfY8ac-QtJ4bzIrBGXMYwl58P_
"""

Cpip install yfinance

import yfinance as yf

# Define the stock symbol and date range
symbol = 'TSLA'
start_date = '2023-01-01'
end_date = '2024-01-01'

# Retrieve historical stock price data from Yahoo Finance
stock_data = yf.download(symbol, start=start_date, end=end_date)
stock_data.head()

missing_values = stock_data.isnull().sum()
print("Missing Values:\n", missing_values)


stock_data.dropna(inplace=True)

import matplotlib.pyplot as plt


plt.figure(figsize=(10, 6))
stock_data['Close'].plot()
plt.title('Historical Stock Prices')
plt.xlabel('Date')
plt.ylabel('Price (USD)')
plt.grid(True)
plt.show()

# Calculate moving averages
stock_data['50_MA'] = stock_data['Close'].rolling(window=50).mean()
stock_data['200_MA'] = stock_data['Close'].rolling(window=200).mean()

# Plot moving averages
plt.figure(figsize=(10, 6))
stock_data[['Close', '50_MA', '200_MA']].plot()
plt.title('Moving Averages')
plt.xlabel('Date')
plt.ylabel('Price (USD)')
plt.grid(True)
plt.show()

# Dummy sentiment analysis
# This is just a placeholder and does not perform actual sentiment analysis
positive_tweets = 100
negative_tweets = 50
neutral_tweets = 30

# Plot sentiment distribution
plt.figure(figsize=(6, 4))
plt.bar(['Positive', 'Negative', 'Neutral'], [positive_tweets, negative_tweets, neutral_tweets])
plt.title('Sentiment Analysis')
plt.xlabel('Sentiment')
plt.ylabel('Number of Tweets')
plt.show()



from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

# Ensure the features and target variable have the same length
stock_data = stock_data.dropna()  # Drop rows with missing values

# Define features (moving averages) and target variable (closing price)
X = stock_data[['50_MA', '200_MA']].values
y = stock_data['Close'].values

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Calculate mean squared error
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

